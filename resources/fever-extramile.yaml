openapi: 3.0.0
info:
  title: Fever Providers API
  version: 1.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/luis-pintado-feverup/backend-test/1.0.0
paths:
  /search:
    get:
      operationId: searchEvents
      parameters:
        - in: query
          name: starts_at
          required: false
          schema:
            type: string
            format: date-time
            example: "2017-07-21T17:32:28Z"
          description: Return only events that starts after this date
        - in: query
          name: ends_at
          required: false
          schema:
            type: string
            format: date-time
            example: "2021-07-21T17:32:28Z"
          description: Return only events that finishes before this date
      summary: Lists the available events on a time range
      responses:
        200:
          description: List of plans
          content:
            application/json:
              schema:
                type: object
                required:
                 - data
                 - error
                properties:
                  data:
                    $ref: "#/components/schemas/EventList"
                  error:
                    type: object
                    nullable: true
                    example: null
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/GenericError"
  /search-orders:
    post:
      operationId: createSearchOrder
      summary: Create an asynchronous search order
      responses:
        200:
          description: A new search order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchOrder'
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/GenericError"        
  /search-orders/{id}:
    get:
      operationId: getSearchOrder
      summary: Create an asynchronous search order
      parameters:
        - name: id
          in: path
          description: search order id
          required: true
          schema:
            type: string
      responses:
        200:
          description: A new search order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchOrder'
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/GenericError"                
components:
  schemas:
    EventList:
      type: object
      required:
        - events
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/EventSummary"
    EventSummary:
      type: object
      required:
        - id
        - title
        - start_date
        - start_time
        - end_date
        - end_time
        - min_price
        - max_price
      properties:
        id:
          type: string
          format: uuid
          description: Identifier for the plan (UUID)
        title:
          type: string
          description: Title of the plan
        start_date:
          type: string
          format: date
          description: Date when the event starts in local time
        start_time:
          type: string
          format: time
          nullable: true
          example: "22:38:19"
          description: Time when the event starts in local time
        end_date:
          type: string
          format: date
          nullable: true
          description: Date when the event ends in local time
        end_time:
          type: string
          format: time
          nullable: true
          example: "14:45:15"
          description: Time when the event ends in local time
        min_price:
          type: number
          nullable: true
          description: Min price from all the available tickets
        max_price:
          type: number
          nullable: true
          description: Min price from all the available tickets
    SearchOrder:
      type: object
      required:
        - id
        - status
        - events
      properties:
        id:
          type: string
        status:
          $ref: "#/components/schemas/SearchOrderStatus"
        events:
          type: array
          items:
            $ref: "#/components/schemas/EventSummary"  
    SearchOrderStatus:
      type: string
      format: enum
      title: SearchOrderStatus
      enum:
        - DONE
        - PENDING
        - ERROR
        - UNKNOWN          
  responses:
    BadRequest:
      description: The request was not correctly formed (missing required parameters, wrong types...)
      content:
        application/json:
          schema:
            type: object
            required:
              - error
              - data
            properties:
              error:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                    description: Error code
                  message:
                    type: string
                    description: Detail of the error
              data:
                type: object
                nullable: true
                example: null
    GenericError:
      description: Generic error
      content:
        application/json:
          schema:
            type: object
            required:
              - error
              - data
            properties:
              error:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                    description: Error code
                  message:
                    type: string
                    description: Detail of the error
              data:
                type: object
                nullable: true
                example: null